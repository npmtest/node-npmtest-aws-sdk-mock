{"/home/travis/build/npmtest/node-npmtest-aws-sdk-mock/test.js":"/* istanbul instrument in package npmtest_aws_sdk_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aws-sdk-mock/lib.npmtest_aws_sdk_mock.js":"/* istanbul instrument in package npmtest_aws_sdk_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_aws_sdk_mock = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_aws_sdk_mock = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-aws-sdk-mock/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-aws-sdk-mock && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_aws_sdk_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_aws_sdk_mock\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_aws_sdk_mock.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_aws_sdk_mock.rollup.js'] =\n            local.assetsDict['/assets.npmtest_aws_sdk_mock.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_aws_sdk_mock.__dirname + '/lib.npmtest_aws_sdk_mock.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aws-sdk-mock/node_modules/aws-sdk-mock/index.js":"'use strict';\n/**\n* Helpers to mock the AWS SDK Services using sinon.js under the hood\n* Export two functions:\n* - mock\n* - restore\n*\n* Mocking is done in two steps:\n* - mock of the constructor for the service on AWS\n* - mock of the method on the service\n**/\n\nvar sinon = require('sinon');\nvar traverse = require('traverse');\nvar _AWS  = require('aws-sdk');\nvar Readable = require('stream').Readable;\n\nvar AWS      = {};\nvar services = {};\n\n/**\n * Sets the aws-sdk to be mocked.\n */\nAWS.setSDK = function(path) {\n  _AWS = require(path);\n};\n\n/**\n * Stubs the service and registers the method that needs to be mocked.\n */\nAWS.mock = function(service, method, replace) {\n  // If the service does not exist yet, we need to create and stub it.\n  if (!services[service]) {\n    services[service]             = {};\n\n    /**\n     * Save the real constructor so we can invoke it later on.\n     * Uses traverse for easy access to nested services (dot-separated)\n     */\n    services[service].Constructor = traverse(_AWS).get(service.split('.'));\n    services[service].methodMocks = {};\n    services[service].invoked = false;\n    mockService(service);\n  }\n\n  // Register the method to be mocked out.\n  if(!services[service].methodMocks[method]) {\n    services[service].methodMocks[method] = { replace: replace };\n\n    // If the constructor was already invoked, we need to mock the method here.\n    if(services[service].invoked) {\n      mockServiceMethod(service, services[service].client, method, replace);\n    }\n  }\n  return services[service].methodMocks[method];\n}\n\n/**\n * Stub the constructor for the service on AWS.\n * E.g. calls of new AWS.SNS() are replaced.\n */\nfunction mockService(service) {\n  var nestedServices = service.split('.');\n  var method = nestedServices.pop();\n  var object = traverse(_AWS).get(nestedServices);\n\n  var serviceStub = sinon.stub(object, method, function(args) {\n    services[service].invoked = true;\n\n    /**\n     * Create an instance of the service by calling the real constructor\n     * we stored before. E.g. var client = new AWS.SNS()\n     * This is necessary in order to mock methods on the service.\n     */\n    var client               = new services[service].Constructor(args);\n    services[service].client = client;\n\n    // Once this has been triggered we can mock out all the registered methods.\n    for (var key in services[service].methodMocks) {\n      mockServiceMethod(service, client, key, services[service].methodMocks[key].replace);\n    };\n    return client;\n  });\n  services[service].stub = serviceStub;\n};\n\n/**\n *  Stubs the method on a service.\n *\n * All AWS service methods take two argument:\n *  - params: an object.\n *  - callback: of the form 'function(err, data) {}'.\n */\nfunction mockServiceMethod(service, client, method, replace) {\n  services[service].methodMocks[method].stub = sinon.stub(client, method, function() {\n    var args = Array.prototype.slice.call(arguments);\n\n    var userArgs, userCallback;\n    if (typeof(args[(args.length || 1) - 1]) === 'function') {\n      userArgs = args.slice(0, -1);\n      userCallback = args[(args.length || 1) - 1];\n    } else {\n      userArgs = args;\n    }\n    var havePromises = typeof(AWS.Promise) === 'function';\n    var promise, resolve, reject;\n    var makeResolved = function(value) {return new AWS.Promise(function (res) { res(value); }); };\n    var makeRejected = function(value) {return new AWS.Promise(function (res, rej) { rej(value); }); };\n    var callback = function(err, data) {\n      if (havePromises) {\n        if (err) {\n          if (reject) {\n            reject(err);\n          } else {\n            promise = makeRejected(err);\n          }\n        } else {\n          if (resolve) {\n            resolve(data);\n          } else {\n            promise = makeResolved(data);\n          }\n        }\n      }\n      if (userCallback) {\n        userCallback(err, data);\n      }\n    };\n    var request = {\n      promise: havePromises ? function() {\n        if (!promise) {\n          promise = new AWS.Promise(function (resolve_, reject_) {\n            resolve = resolve_;\n            reject = reject_;\n          });\n        }\n        return promise;\n      } : undefined,\n      createReadStream: function() {\n        var stream = new Readable();\n        stream._read = function(size) {\n          if(typeof(replace) === 'string' || Buffer.isBuffer(replace)) {\n            this.push(replace);\n          }\n          this.push(null);\n        };\n        return stream;\n      }\n    };\n\n    // different locations for the paramValidation property\n    var config = (client.config || client.options || _AWS.config);\n    if (config.paramValidation) {\n      try {\n        // different strategies to find method, depending on wether the service is nested/unnested\n        var inputRules =\n          ((client.api && client.api.operations[method]) || client[method] || {}).input;\n        if (inputRules) {\n          var params = userArgs[(userArgs.length || 1) - 1];\n          new _AWS.ParamValidator((client.config || _AWS.config).paramValidation).validate(inputRules, params);\n        }\n      } catch (e) {\n        callback(e, null);\n        return request;\n      }\n    }\n\n    // If the value of 'replace' is a function we call it with the arguments.\n    if(typeof(replace) === 'function') {\n      replace.apply(replace, userArgs.concat([callback]));\n    }\n    // Else we call the callback with the value of 'replace'.\n    else {\n      callback(null, replace);\n    }\n    return request;\n  });\n}\n\n/**\n * Restores the mocks for just one method on a service, the entire service, or all mocks.\n *\n * When no parameters are passed, everything will be reset.\n * When only the service is passed, that specific service will be reset.\n * When a service and method are passed, only that method will be reset.\n */\nAWS.restore = function(service, method) {\n  if(!service) {\n    restoreAllServices();\n  } else {\n    if (method) {\n      restoreMethod(service, method);\n    } else {\n      restoreService(service);\n    }\n  };\n}\n\n/**\n * Restores all mocked service and their corresponding methods.\n */\nfunction restoreAllServices() {\n  for (var service in services) {\n    restoreService(service);\n  }\n}\n\n/**\n * Restores a single mocked service and its corresponding methods.\n */\nfunction restoreService(service) {\n  if (services[service]) {\n    restoreAllMethods(service);\n    if( services[service].stub)\n      services[service].stub.restore();\n    delete services[service];\n  } else {\n    console.log('Service ' + service + ' was never instantiated yet you try to restore it.');\n  }\n}\n\n/**\n * Restores all mocked methods on a service.\n */\nfunction restoreAllMethods(service) {\n  for (var method in services[service].methodMocks) {\n    restoreMethod(service, method);\n  }\n}\n\n/**\n * Restores a single mocked method on a service.\n */\nfunction restoreMethod(service, method) {\n  if (services[service] && services[service].methodMocks[method]) {\n    if (services[service].methodMocks[method].stub) {\n      services[service].methodMocks[method].stub.restore();\n    }\n    delete services[service].methodMocks[method];\n  } else {\n    console.log('Method ' + service + ' was never instantiated yet you try to restore it.');\n  }\n\n}\n\n(function(){\n  var setPromisesDependency = _AWS.config.setPromisesDependency;\n  /* istanbul ignore next */\n  /* only to support for older versions of aws-sdk */\n  if (typeof(setPromisesDependency) === 'function') {\n    AWS.Promise = global.Promise\n    _AWS.config.setPromisesDependency = function(p) {\n      AWS.Promise = p;\n      return setPromisesDependency(p);\n    };\n  }\n})()\n\nmodule.exports = AWS;\n"}